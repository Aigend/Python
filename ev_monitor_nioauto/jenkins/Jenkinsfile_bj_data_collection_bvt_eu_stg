pipeline {
     agent {
        kubernetes{
           cloud 'kubernetes-tc-test' //cloud关联 test环境用kubernetes-test，stg环境用kubernetes
           label 'SEQ-AUTOTEST-PYTHON36-F2' //用于关联相同环境的slave。参考slave命名规范 TODO 自定义label名称
           idleMinutes 10 //所创建的pod在job结束后直到销毁前的等待时间
           yamlFile "jenkins/jenkins_pod_template.yaml" // 指定创建pod时的yaml配置文件
           defaultContainer 'python3' // [*] stages和post步骤中默认用到的container。如需指定其他container，可用语法 container("java8"){...}
        }
      }

     parameters {
         choice(name: 'env', choices: 'stg_marcopolo\ndev\ntest', description: '测试环境，请选择dev？test？stg？')
         string(name: 'directory', defaultValue: 'tests/data_collection_bvt_eu', description: '测试用例')
         string(name: 'deploy_id', defaultValue: '', description: '部署id，venus平台传入')
         string(name: 'version', defaultValue: '', description: '当前部署的服务版本，venus平台传入')
     }
     environment {
         //git相关
         git_url = 'git@git.nevint.com:automation/ev_monitor_nioauto.git' //项目仓库地址
         git_key = 'c8615bc3-c995-40ed-92ba-d5b66943f116' //固定值，不要修改
         git_branch = 'master'
         gitpullerr = 'noerr'

         //job失败后发送的邮件名单
         email_list = 'dun.yuan@nio.com'
     }
     options {
         buildDiscarder(logRotator(numToKeepStr: '30'))  //保存的job构建记录总数
         timeout(time: 30, unit: 'MINUTES')  //job超时时间
         disableConcurrentBuilds() //不允许同时执行流水线
     }
     stages {
         // 如果jenkins project的config里配了pipeline scripts from SCM，此步骤可参略
         stage('拉取测试代码') {
             steps {
                 git branch: "${git_branch}", credentialsId: "${git_key}", url: "${git_url}"
             }
         }
         stage('安装测试依赖') {
             //when {
             //    changeset "**/Pipfile" //SCM chagneset包含指定文件时
             //}
             steps {
                 // sh "pipenv --rm"
                 sh "pipenv install --skip-lock --ignore-pipfile"
                 sh "pipenv graph"
             }
         }
         stage('执行测试用例') {
             steps {
                 script {
                     sh "rm -rf $env.WORKSPACE/allure-*"//执行前先清空报告
                     sh "pipenv run py.test --env '${params.env}' '${params.directory}' --json-report --bvt"
                 }
             }
         }
     }
     post {
         always{
            container("java8"){
             script{
                 // 将allure 报告展示到jenkins上
                 allure includeProperties: false, jdk: '', report: 'jenkins-allure-report', results: [[path: 'allure-results']]
                }
           }
         }
         failure {
             script {
                 if (gitpullerr == 'noerr') {
                     mail to: "${email_list}",
                     subject: "[Jenkins Build Notification] ${JOB_NAME} - Build # ${BUILD_NUMBER} -构建失败!",
                     body: "'${env.JOB_NAME}' (${env.BUILD_NUMBER}) 执行失败了 \n请及时前往 ${env.BUILD_URL} 进行查看"
                 } else {
                     echo 'scm pull error ignore send mail'
                 }
             }
         }
     }
}