def upstream_list = 'cvs-tsp-data-collection-all-deploy-env_test' //上游job列表，逗号分隔
def project_name = 'tsp-data-collection'

pipeline {
    agent { label 'jnlp-slave-python3.6' } //job运行的executor
    parameters {
        choice(name: 'envrion', choices: 'test\ndev\nstg', description: '测试环境，请选择dev？test？stg？')
        string(name: 'keywords', defaultValue: 'tests', description: '关键字，用于过滤测试用例，可以使用目录名、py文件名过滤')
    }
    environment {
        git_url = 'git@git.nevint.com:automation/ev_monitor_nioauto.git' //项目仓库地址
        git_key = 'c8615bc3-c995-40ed-92ba-d5b66943f116' //固定值，不要修改
        git_branch = 'master'
        gitpullerr = 'noerr'
        email_list = 'li.liu2@nio.com, hongzhen.bi@nio.com' //job失败后给谁发邮件
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '30'))
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
    }
    triggers {
        pollSCM('H * * * 1-5')//周一到周五，每小时
        cron('H H * * *') //每天
        gitlab(triggerOnPush: true, triggerOnMergeRequest: false, branchFilterType: 'All')
        upstream(upstreamProjects: "${upstream_list}", threshold: hudson.model.Result.SUCCESS)
    }
    stages {
        stage('拉取测试代码') {
            steps {
                git branch: "${git_branch}", credentialsId: "${git_key}", url: "${git_url}"
            }
        }
        stage('安装测试依赖') {
            steps {
                //sh "pipenv --rm"
                sh "pipenv install --skip-lock --ignore-pipfile"
                sh "pipenv graph"
            }
        }
        stage('执行测试用例') {
            steps {
                sh "rm -rf $env.WORKSPACE/allure-*"//执行前先清空报告
                //sh "export PATH=$env.WORKSPACE:$PATH"
                sh "echo $PATH"
                sh "pipenv run py.test --env '${params.envrion}' -k '${params.keywords}'"
            }
        }
    }
    post {
        always{
            script {
                 allure includeProperties: false, jdk: '', report: 'jenkins-allure-report', results: [[path: 'allure-results']]

                sh """
                    echo \$(curl -s http://venus.nioint.com/ext_api/version?env_name=${params.envrion}\\&project_name=${project_name} |
                    jq '.data.version') |
                    xargs -i curl -X POST "http://pangu.nioint.com/qa/api/1/jsonreport?version={}&env=${params.envrion}&project=${project_name}" -H "content-type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW" -F file=@.report.json
                   """
                //sh "find $env.WORKSPACE/allure-report -name '*.tar.gz' | xargs -i curl -X POST http://pangu.nioint.com/qa/api/1/upload -H 'content-type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW' -F file=@{}"

            }

        }
        failure {
            script {
                if (gitpullerr == 'noerr') {
                    mail to: "${email_list}",
                            subject: "[Jenkins Build Notification] ${JOB_NAME} - Build # ${BUILD_NUMBER} -构建失败!",
                            body: "'${env.JOB_NAME}' (${env.BUILD_NUMBER}) 执行失败了 \n请及时前往 ${env.BUILD_URL} 进行查看"
                } else {
                    echo 'scm pull error ignore send mail'
                }
            }
        }
    }

}
